/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Controlador;

import Decorator.Diagonales;
import Decorator.ParesImpares;
import Decorator.Simetria;
import Decorator.SumasHorizontales;
import Decorator.Fibonacci;
import java.util.ArrayList;
import javax.swing.JLabel;
import Factory.FactoriaPascal;
import Product.Triangulo;
import Product.Celda;
import Product.Pascal;
import java.awt.Color;
import javax.swing.JTextPane;

/**
 *
 * @author dms
 */
public class ControladorPascal extends javax.swing.JFrame {
    private ArrayList lista_jLBs;
    private Triangulo pascal;
    private ArrayList estructura;
    
    /**
     * Creates new form Pascal
     */
    public ControladorPascal() {
        initComponents();
    }
    
    public ControladorPascal(int filas) {
        initComponents();       
               
        FactoriaPascal fabrica = new FactoriaPascal();
        pascal = fabrica.Generar(filas);
  
        lista_jLBs = new ArrayList();
        estructura = pascal.getEstructura();
        JLabel labelTmp;
        Celda celdaTmp;
        int xPos;
        int yPos = 20; 
        SumasHorizontales equisde = new SumasHorizontales((Pascal) pascal);
        ArrayList nume = new ArrayList();
        nume = equisde.sumasHorizontales();
        for (int i = 0; i < filas; i++){
            xPos = 320 - (i * 28);
            for (int j = 0; j < i+1; j++){
                celdaTmp = (Celda)((ArrayList)estructura.get(i)).get(j);
                labelTmp = new JLabel("<" + celdaTmp.getValor() + ">");
                this.add(labelTmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(xPos, yPos, -1, -1));
                lista_jLBs.add(labelTmp);
                
                xPos += 55;
            }
            labelTmp = new JLabel(String.valueOf(nume.get(i)));
            this.add(labelTmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, yPos, -1, -1));
            yPos += 30;
        }        
        
        pintar();
    }

    public JTextPane getDescripcion() {
        return Descripcion;
    }

    public void setDescripcion(JTextPane Descripcion) {
        this.Descripcion = Descripcion;
    }

    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jB_ParesImpares = new javax.swing.JButton();
        jB_Diagonales = new javax.swing.JButton();
        jB_Potencias = new javax.swing.JButton();
        jB_Simetria = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Descripcion = new javax.swing.JTextPane();
        jB_Fibonacci = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Triángulo Pascal");
        setMinimumSize(new java.awt.Dimension(680, 520));
        setPreferredSize(new java.awt.Dimension(680, 520));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jB_ParesImpares.setText("Pares e Impares");
        jB_ParesImpares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_ParesImparesActionPerformed(evt);
            }
        });
        getContentPane().add(jB_ParesImpares, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 440, 190, -1));

        jB_Diagonales.setText("Diagonales");
        jB_Diagonales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_DiagonalesActionPerformed(evt);
            }
        });
        getContentPane().add(jB_Diagonales, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 350, 190, -1));

        jB_Potencias.setText("Potencias de 2");
        jB_Potencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PotenciasActionPerformed(evt);
            }
        });
        getContentPane().add(jB_Potencias, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 380, 190, -1));

        jB_Simetria.setText("Simetría");
        jB_Simetria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_SimetriaActionPerformed(evt);
            }
        });
        getContentPane().add(jB_Simetria, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 410, 190, -1));

        Descripcion.setEditable(false);
        jScrollPane1.setViewportView(Descripcion);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 350, 360, 160));

        jB_Fibonacci.setText("Sucesión de Fibonacci");
        jB_Fibonacci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FibonacciActionPerformed(evt);
            }
        });
        getContentPane().add(jB_Fibonacci, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 470, 190, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jB_ParesImparesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_ParesImparesActionPerformed
        ParesImpares fiboncci = new ParesImpares((Product.Pascal) pascal);
        fiboncci.limpiar();
        fiboncci.mostrarParesImpares();
        getDescripcion().setText("Pares e Impares:\n" +
"Al colorear los números pares e impares del triángulo de diferente color, se verá un triángulo de Sierpinski que es un triángulo donde se le introducen más triángulos, cada vez reduciendolos a la mitad.");
        pintar();
    }//GEN-LAST:event_jB_ParesImparesActionPerformed

    private void jB_DiagonalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_DiagonalesActionPerformed
        Diagonales diagonales = new Diagonales((Product.Pascal) pascal);
        diagonales.limpiar();
        diagonales.mostrarDiagonales();
        getDescripcion().setText("Diagonales: \nLas diagonales del triángulo nos muestran propiedades de los números. \nSegunda diagonal: (roja) Son los números naturales, comienzan en 1 y siguen consecutivamente. \nTercera Diagonal: (amarilla) Son los números triangulares, son números con los que se puede crear un triángulo equilátero donde cada número se calcula con la fórmula (n(n+1))/2. \nCuarta Diagonal: (azul) Son los números tetraédricos que son los números elevados al cuadrado de acuerdo a su posición, en este caso la posición es el número de fila.");
        pintar();
    }//GEN-LAST:event_jB_DiagonalesActionPerformed

    private void jB_PotenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PotenciasActionPerformed
        SumasHorizontales sumas = new SumasHorizontales((Product.Pascal) pascal);
        sumas.limpiar();
        sumas.sumasHorizontales();
        getDescripcion().setText("Potencias de dos:\n" +
"Si por fila se suman los números que la componen se obtendrá una potencia de 2.");
        pintar();
    }//GEN-LAST:event_jB_PotenciasActionPerformed

    private void jB_SimetriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_SimetriaActionPerformed
        Simetria simetria = new Simetria((Product.Pascal) pascal);
        simetria.limpiar();
        simetria.mostrarSimetria();
        getDescripcion().setText("Simetría:\n" +
"Cuando se divide el triángulo por la mitad, a ambos lados se encontrarán los mismos números.");
        pintar();
    }//GEN-LAST:event_jB_SimetriaActionPerformed

    private void jB_FibonacciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FibonacciActionPerformed
        Fibonacci fib = new Fibonacci((Pascal) pascal);
        fib.limpiar();
        fib.mostrarSucesion();
        
        pintar();
    }//GEN-LAST:event_jB_FibonacciActionPerformed
    
    private void pintar(){
        JLabel jLabelTmp;
        Celda celdaTmp;
        int pos = 0;
        for (int i = 0; i < estructura.size(); i++){
            for (int j = 0; j < ((ArrayList)estructura.get(i)).size(); j++){
                jLabelTmp = (JLabel) lista_jLBs.get(pos);
                celdaTmp = (Celda) ((ArrayList)estructura.get(i)).get(j);
                Color color = celdaTmp.getColor();
                jLabelTmp.setForeground(color);
                pos++;
            }            
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControladorPascal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControladorPascal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControladorPascal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControladorPascal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControladorPascal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane Descripcion;
    private javax.swing.JButton jB_Diagonales;
    private javax.swing.JButton jB_Fibonacci;
    private javax.swing.JButton jB_ParesImpares;
    private javax.swing.JButton jB_Potencias;
    private javax.swing.JButton jB_Simetria;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
